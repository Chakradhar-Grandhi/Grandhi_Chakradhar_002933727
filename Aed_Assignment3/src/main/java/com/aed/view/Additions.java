/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.aed.view;

import com.aed.model.Community;
import com.aed.model.Doctor;
import com.aed.model.Encounter;
import com.aed.model.Hospital;
import com.aed.model.Person;
import java.awt.CardLayout;
import java.time.Clock;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author just_chakri
 */
public class Additions extends javax.swing.JFrame {
    int communityId = 100,personId=200,hospitalId=300,encounterId=400,commref=0,flag=0,perref=0,hosref=0,docref=0;
    String role = "SA";
    HashMap<Integer,Community> communityMap = new HashMap<>();
    HashMap<Integer,Person> personMap = new HashMap<>();
    HashMap<Integer,Hospital> hospitalMap = new HashMap<>();
    HashMap<Integer,Doctor> doctorMap = new HashMap<>();
    HashMap<Integer,Encounter> encounterMap = new HashMap<>();
    
    
    

    /**
     * Creates new form Additions
     */
     CardLayout cards;
     
     
     
     
    public Additions() {
        initComponents();
        
     cards = (CardLayout)( pnlLayout.getLayout() );
     // Community Data Addition
     communityMap.put(communityId, new Community(communityId++,"Alphonsus St", "Boston","02120"));
     communityMap.put(communityId, new Community(communityId++,"Huntington Ave", "Boston","02122"));
     communityMap.put(communityId, new Community(communityId++,"Rivery", "New York","02123"));
     
     //Person Data Addition
     personMap.put(personId, new Person(personId, "Chakradhar",Integer.toString(personId++),"1234","SA",23,"Male","xyz",75,"Boston",100));  
     personMap.put(personId, new Person(personId, "Rakshit",Integer.toString(personId++),"1234","CA",25,"Male","xyz",75,"Boston",101));     
     personMap.put(personId, new Person(personId, "Palak",Integer.toString(personId++),"1234","Doctor",21,"Female","xyz",881,"New York",102));        


    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pGender = new javax.swing.ButtonGroup();
        mpGender = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        lPerson = new javax.swing.JButton();
        lHospital = new javax.swing.JButton();
        lDoctor = new javax.swing.JButton();
        pnlLayout = new javax.swing.JPanel();
        AddDoctor = new javax.swing.JPanel();
        community = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        cName = new javax.swing.JTextField();
        cCombo = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cZip = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comSubmit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commTable = new javax.swing.JTable();
        mcName = new javax.swing.JTextField();
        mcCity = new javax.swing.JComboBox<>();
        mcZip = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        hospital = new javax.swing.JTabbedPane();
        addHos = new javax.swing.JPanel();
        hName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        hCity = new javax.swing.JComboBox<>();
        hComm = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        editHos = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        hosTable = new javax.swing.JTable();
        mhName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        hEdit = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        mhCity = new javax.swing.JComboBox<>();
        mhComm = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        person = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        pName = new javax.swing.JTextField();
        pAge = new javax.swing.JTextField();
        pMale = new javax.swing.JRadioButton();
        pFemale = new javax.swing.JRadioButton();
        pRole = new javax.swing.JComboBox<>();
        pCity = new javax.swing.JComboBox<>();
        pUpload = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        pHno = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        pComm = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        pSubmit = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        mpName = new javax.swing.JTextField();
        mpAge = new javax.swing.JTextField();
        mpMale = new javax.swing.JRadioButton();
        mpFemale = new javax.swing.JRadioButton();
        mpRole = new javax.swing.JComboBox<>();
        mpCity = new javax.swing.JComboBox<>();
        mpHno = new javax.swing.JTextField();
        pUpload1 = new javax.swing.JButton();
        pEdit = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        perTable = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        mpComm = new javax.swing.JComboBox<>();
        linkDoc = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lDocTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        lHosDocTable = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        deLinkDoc = new javax.swing.JButton();
        linkPerson = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lPTable = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        lCommTable = new javax.swing.JTable();
        jButton13 = new javax.swing.JButton();
        linkHospital = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        lHosTable = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        lHoscommTable = new javax.swing.JTable();
        hosLink = new javax.swing.JButton();
        hosUnlink = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jButton15 = new javax.swing.JButton();
        Encounter = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Doctor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hospital");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton10.setText("Community");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Person");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        lPerson.setText("Link Person");
        lPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lPersonActionPerformed(evt);
            }
        });

        lHospital.setText("Link Hospital");
        lHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lHospitalActionPerformed(evt);
            }
        });

        lDoctor.setText("Link Doctor");
        lDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lDoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lHospital, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jButton1)
                .addGap(58, 58, 58)
                .addComponent(jButton2)
                .addGap(42, 42, 42)
                .addComponent(jButton10)
                .addGap(46, 46, 46)
                .addComponent(jButton11)
                .addGap(36, 36, 36)
                .addComponent(lPerson)
                .addGap(34, 34, 34)
                .addComponent(lHospital)
                .addGap(30, 30, 30)
                .addComponent(lDoctor)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        pnlLayout.setLayout(new java.awt.CardLayout());

        AddDoctor.setBackground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout AddDoctorLayout = new javax.swing.GroupLayout(AddDoctor);
        AddDoctor.setLayout(AddDoctorLayout);
        AddDoctorLayout.setHorizontalGroup(
            AddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
        );
        AddDoctorLayout.setVerticalGroup(
            AddDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 864, Short.MAX_VALUE)
        );

        pnlLayout.add(AddDoctor, "Doctor");

        community.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                communityMouseClicked(evt);
            }
        });

        cName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cNameActionPerformed(evt);
            }
        });

        cCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));
        cCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cComboActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("City");

        jLabel3.setText("Zip Code");

        comSubmit.setText("Submit");
        comSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(77, 77, 77)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cName, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                            .addComponent(cZip)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(comSubmit)))
                .addContainerGap(326, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(68, 68, 68)
                .addComponent(comSubmit)
                .addContainerGap(518, Short.MAX_VALUE))
        );

        community.addTab("Add Community", jPanel2);

        commTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Community ID", "Name", "City", "Zip Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        commTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                commTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(commTable);

        mcCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));

        jLabel4.setText("Name");

        jLabel5.setText("City");

        jLabel6.setText("Zip Code");

        jButton3.setText("Edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mcCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mcName, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                            .addComponent(mcZip))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(201, 201, 201))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mcName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mcCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(44, 44, 44)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mcZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(98, 98, 98)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(206, Short.MAX_VALUE))
        );

        community.addTab("Edit Community", jPanel3);

        pnlLayout.add(community, "Community");

        hospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hospitalMouseClicked(evt);
            }
        });

        jLabel10.setText("Name");

        jButton5.setText("Add");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        hCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));
        hCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hCityActionPerformed(evt);
            }
        });

        jLabel7.setText("City");

        jLabel8.setText("Community");

        javax.swing.GroupLayout addHosLayout = new javax.swing.GroupLayout(addHos);
        addHos.setLayout(addHosLayout);
        addHosLayout.setHorizontalGroup(
            addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addHosLayout.createSequentialGroup()
                .addGroup(addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addHosLayout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addComponent(jButton5))
                    .addGroup(addHosLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(95, 95, 95)
                        .addGroup(addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(hName, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addHosLayout.createSequentialGroup()
                                .addComponent(hCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(268, 268, 268))
                            .addComponent(hComm, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(296, Short.MAX_VALUE))
        );
        addHosLayout.setVerticalGroup(
            addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addHosLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(hCity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hComm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(30, 30, 30)
                .addComponent(jButton5)
                .addContainerGap(589, Short.MAX_VALUE))
        );

        hospital.addTab("Add Hospital", addHos);

        hosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hospital ID", "Hospital Name", "City", "Community"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        hosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hosTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(hosTable);

        jLabel11.setText("Name");

        hEdit.setText("Edit");
        hEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hEditActionPerformed(evt);
            }
        });

        jButton7.setText("Delete");

        mhCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));
        mhCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mhCityActionPerformed(evt);
            }
        });

        mhComm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("City");

        jLabel28.setText("Community");

        javax.swing.GroupLayout editHosLayout = new javax.swing.GroupLayout(editHos);
        editHos.setLayout(editHosLayout);
        editHosLayout.setHorizontalGroup(
            editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(editHosLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(hEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addGap(184, 184, 184))
            .addGroup(editHosLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel9)
                    .addComponent(jLabel28))
                .addGap(135, 135, 135)
                .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mhName, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(mhComm, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mhCity, javax.swing.GroupLayout.Alignment.LEADING, 0, 143, Short.MAX_VALUE)))
                .addContainerGap(279, Short.MAX_VALUE))
        );
        editHosLayout.setVerticalGroup(
            editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editHosLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mhName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(27, 27, 27)
                .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(mhCity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mhComm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addGap(44, 44, 44)
                .addGroup(editHosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hEdit)
                    .addComponent(jButton7))
                .addGap(0, 336, Short.MAX_VALUE))
        );

        hospital.addTab("Edit Hospital", editHos);

        pnlLayout.add(hospital, "Hospital");

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        pName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pNameActionPerformed(evt);
            }
        });

        pGender.add(pMale);
        pMale.setText("Male");
        pMale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pMaleMouseClicked(evt);
            }
        });

        pGender.add(pFemale);
        pFemale.setText("Female");
        pFemale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pFemaleMouseClicked(evt);
            }
        });

        pRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SA", "CA", "HA", "Doctor", "Person" }));
        pRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pRoleActionPerformed(evt);
            }
        });

        pCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));
        pCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCityActionPerformed(evt);
            }
        });

        pUpload.setText("Upload ");

        jLabel12.setText("Name");

        jLabel13.setText("Age");

        jLabel14.setText("Gender");

        jLabel15.setText("Role");

        jLabel16.setText("City");

        jLabel17.setText("Community");

        pComm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pCommActionPerformed(evt);
            }
        });

        jLabel18.setText("House Number");

        jLabel19.setText("Upload Pic");

        pSubmit.setText("Submit");
        pSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel17)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19))
                        .addGap(82, 82, 82)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pUpload)
                            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pHno, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel9Layout.createSequentialGroup()
                                    .addComponent(pMale)
                                    .addGap(34, 34, 34)
                                    .addComponent(pFemale))
                                .addComponent(pAge, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                                .addComponent(pName))
                            .addComponent(pRole, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pCity, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pComm, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(pSubmit)))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pMale)
                    .addComponent(pFemale)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(pRole, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(pCity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(pComm, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pHno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pUpload)
                    .addComponent(jLabel19))
                .addGap(46, 46, 46)
                .addComponent(pSubmit)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Person", jPanel9);

        mpName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpNameActionPerformed(evt);
            }
        });

        mpGender.add(mpMale);
        mpMale.setText("Male");
        mpMale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mpMaleMouseClicked(evt);
            }
        });

        mpGender.add(mpFemale);
        mpFemale.setText("Female");
        mpFemale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mpFemaleMouseClicked(evt);
            }
        });

        mpRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SA", "CA", "HA", "Doctor", "Person" }));
        mpRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpRoleActionPerformed(evt);
            }
        });

        mpCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "New York", "California" }));
        mpCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mpCityActionPerformed(evt);
            }
        });

        pUpload1.setText("Upload ");

        pEdit.setText("Edit");
        pEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pEditActionPerformed(evt);
            }
        });

        jLabel20.setText("Upload Pic");

        jLabel21.setText("House Number");

        jLabel22.setText("Community");

        jLabel23.setText("City");

        jLabel24.setText("Role");

        jLabel25.setText("Gender");

        jLabel26.setText("Age");

        jLabel27.setText("Name");

        perTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Person Id", "Name", "Age", "Gender", "Role", "City", "Community", "House Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        perTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                perTableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(perTable);

        jButton12.setText("Delete");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27)
                            .addComponent(jLabel26)
                            .addComponent(jLabel22)
                            .addComponent(jLabel25)
                            .addComponent(jLabel24)
                            .addComponent(jLabel23)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20))
                        .addGap(82, 82, 82)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pUpload1)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(mpMale)
                                .addGap(18, 18, 18)
                                .addComponent(mpFemale))
                            .addComponent(mpName, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                            .addComponent(mpHno)
                            .addComponent(mpAge)
                            .addComponent(mpComm, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(mpRole, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(mpCity, javax.swing.GroupLayout.Alignment.LEADING, 0, 134, Short.MAX_VALUE))))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(pEdit)
                        .addGap(252, 252, 252)
                        .addComponent(jButton12)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27)
                    .addComponent(mpName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel26)
                    .addComponent(mpAge, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel25)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mpMale)
                        .addComponent(mpFemale)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel24))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpRole)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel23))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mpCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(mpComm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21)
                    .addComponent(mpHno, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pUpload1)
                    .addComponent(jLabel20))
                .addGap(56, 56, 56)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pEdit)
                    .addComponent(jButton12))
                .addGap(79, 79, 79))
        );

        jTabbedPane1.addTab("Modify Person Details", jPanel10);

        javax.swing.GroupLayout personLayout = new javax.swing.GroupLayout(person);
        person.setLayout(personLayout);
        personLayout.setHorizontalGroup(
            personLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(personLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(31, 31, 31))
        );
        personLayout.setVerticalGroup(
            personLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pnlLayout.add(person, "Person");

        lDocTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Doctor ID", "Doctor Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lDocTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lDocTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(lDocTable);

        lHosDocTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Hospital ID", "Hospital Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(lHosDocTable);

        jButton8.setText("Link");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        deLinkDoc.setText("Unlink");
        deLinkDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deLinkDocActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(jButton8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deLinkDoc)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addGap(49, 49, 49)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(deLinkDoc))
                .addContainerGap(279, Short.MAX_VALUE))
        );

        linkDoc.addTab("Link Doctor", jPanel7);

        pnlLayout.add(linkDoc, "linkDoctor");

        lPTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PersonID", "Person Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lPTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lPTable);

        lCommTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Comunity ID", "Community Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lCommTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lCommTableMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(lCommTable);

        jButton13.setText("Link");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton13)
                .addGap(386, 386, 386))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(jButton13)
                .addContainerGap(508, Short.MAX_VALUE))
        );

        linkPerson.addTab("Link Person", jPanel4);

        pnlLayout.add(linkPerson, "linkPerson");

        linkHospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                linkHospitalMouseClicked(evt);
            }
        });

        lHosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hospital ID", "Hospital Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lHosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lHosTableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(lHosTable);

        lHoscommTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Community ID", "Community Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lHoscommTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lHoscommTableMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(lHoscommTable);

        hosLink.setText("Link");
        hosLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hosLinkActionPerformed(evt);
            }
        });

        hosUnlink.setText("Unlink");
        hosUnlink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hosUnlinkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(304, 304, 304)
                .addComponent(hosLink)
                .addGap(100, 100, 100)
                .addComponent(hosUnlink)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addComponent(jScrollPane10))
                .addGap(45, 45, 45)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hosLink)
                    .addComponent(hosUnlink))
                .addContainerGap(283, Short.MAX_VALUE))
        );

        linkHospital.addTab("Link Hospital", jPanel11);

        jPanel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel12MouseClicked(evt);
            }
        });

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hospital Id", "Hospital Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane12.setViewportView(jTable10);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Community ID", "Community Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane13.setViewportView(jTable11);

        jButton15.setText("Unlink");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton15)
                .addGap(344, 344, 344))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane13)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
                .addGap(55, 55, 55)
                .addComponent(jButton15)
                .addGap(171, 171, 171))
        );

        linkHospital.addTab("Unlink Hospital", jPanel12);

        pnlLayout.add(linkHospital, "linkHospital");
        linkHospital.getAccessibleContext().setAccessibleName("Link Hospital");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 902, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 833, Short.MAX_VALUE)
        );

        Encounter.addTab("Add Encounter", jPanel5);

        pnlLayout.add(Encounter, "encounter");

        jSplitPane1.setRightComponent(pnlLayout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cards.show(pnlLayout, "Doctor");
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        cards.show(pnlLayout, "Hospital");
        hComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(hCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                hComm.addItem(communityMap.get(i).getName());
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cNameActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
            // TODO add your handling code here:
            
        cards.show(pnlLayout, "Person");
        pComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(pCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                pComm.addItem(communityMap.get(i).getName());
            
        }
        
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        cards.show(pnlLayout, "Community");
    }//GEN-LAST:event_jButton10ActionPerformed

    private void cComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cComboActionPerformed
    public void showCommTable(){
        int index = 0;
        String[][] data = new String[communityMap.size()][4];
        for (Integer k : communityMap.keySet()){
        data[index][0]= Integer.toString(communityMap.get(k).getCommunityId());
        data[index][1]= communityMap.get(k).getName();
        data[index][2]= communityMap.get(k).getCity();
        data[index][3]= communityMap.get(k).getZipcode();
        index++;
        }

        String[] col = {"Community Id", "Name", "City","ZipCode"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        commTable.setModel(model);
    }
    private void comSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comSubmitActionPerformed
        // TODO add your handling code here:
        flag=0;
        
         try {
            ValidateCommData();
        } catch (Exception ex) {
            Logger.getLogger(Additions.class.getName()).log(Level.SEVERE, null, ex);
        }
         if(flag ==0){
            communityMap.put(communityId, new Community(communityId++,cName.getText(), (String) cCombo.getSelectedItem(),cZip.getText()));
            System.out.println(communityMap.get(communityId-1).getCity());
            System.out.println(communityMap.get(communityId-1).getName());
             
            resetCommData();
            
            JOptionPane.showMessageDialog(this, "Data Entered");
            
         }
        
    }//GEN-LAST:event_comSubmitActionPerformed

    private void communityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_communityMouseClicked
        // TODO add your handling code here:
        showCommTable();
    }//GEN-LAST:event_communityMouseClicked
    
    private void commTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commTableMouseClicked
        // TODO add your handling code here:
        commref = Integer.parseInt(commTable.getValueAt(commTable.getSelectedRow(), NORMAL).toString());
        System.out.println("Commref in commmouse " + commref);
        int cind=2;
        String tempCity = (String) commTable.getValueAt(commTable.getSelectedRow(),cind );
        mcName.setText(communityMap.get(commref).getName());
        int tempSize = mcCity.getItemCount();
        for(int i=0;i<tempSize;i++){
            if(mcCity.getItemAt(i).toString() == tempCity){
                mcCity.setSelectedIndex(i);
            }
        }
        mcZip.setText(communityMap.get(commref).getZipcode());
        
        
        
    }//GEN-LAST:event_commTableMouseClicked

    private void pRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pRoleActionPerformed

    private void pNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pNameActionPerformed

    private void pSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pSubmitActionPerformed
        // TODO add your handling code here:
                flag=0;
                
        
         try {
            ValidatePerData();
        } catch (Exception ex) {
            Logger.getLogger(Additions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(flag ==0){
            int temp=0;
            for(Community comm : communityMap.values()){
                if(comm.getName() == (String) pComm.getSelectedItem()){
                    temp = comm.getCommunityId();
                    break;
                }
            }
             
            personMap.put(personId, new Person(personId, pName.getText(),Integer.toString(personId),"1234",(String) pRole.getSelectedItem(),Integer.valueOf(pAge.getText()),pGender.getSelection().getActionCommand(),"xyz",Integer.parseInt(pHno.getText()),(String) pCity.getSelectedItem(),temp));
            if((String)pRole.getSelectedItem()=="Doctor"){
                doctorMap.put(personId, new Doctor(personId));
                System.out.println("Doctor Added");
            }
             
            resetPerData();
            
            JOptionPane.showMessageDialog(this, "Data Entered");
            for(Community i : communityMap.values()){
                //System.out.println("Going inside");
                if(i.getName()== (String)pComm.getSelectedItem()){
                    i.addPerson(personId++);
                    //System.out.println("Added Person");
                }
                //System.out.println(i.xyz());
            }
            
            
         }
        
        
        
    }//GEN-LAST:event_pSubmitActionPerformed

    private void pCommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCommActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_pCommActionPerformed

    private void pCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pCityActionPerformed
        // TODO add your handling code here:
                pComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(pCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                pComm.addItem(communityMap.get(i).getName());
            
        }
    }//GEN-LAST:event_pCityActionPerformed

    private void pMaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pMaleMouseClicked
        // TODO add your handling code here:
        pMale.setActionCommand("Male");
    }//GEN-LAST:event_pMaleMouseClicked

    private void pFemaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pFemaleMouseClicked
        // TODO add your handling code here:
        pFemale.setActionCommand("Female");
    }//GEN-LAST:event_pFemaleMouseClicked

    private void mpNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpNameActionPerformed

    private void mpMaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mpMaleMouseClicked
        // TODO add your handling code here:
        mpMale.setActionCommand("Male");
    }//GEN-LAST:event_mpMaleMouseClicked

    private void mpFemaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mpFemaleMouseClicked
        // TODO add your handling code here:
        mpFemale.setActionCommand("Female");
    }//GEN-LAST:event_mpFemaleMouseClicked

    private void mpRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mpRoleActionPerformed

    private void mpCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mpCityActionPerformed
        // TODO add your handling code here:
        mpComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(mpCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                mpComm.addItem(communityMap.get(i).getName());
        }
    }//GEN-LAST:event_mpCityActionPerformed

    private void pEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pEditActionPerformed
        // TODO add your handling code here:
                        flag=0;
                
        
         try {
            ValidateMPerData();
        } catch (Exception ex) {
            Logger.getLogger(Additions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(flag ==0){
            int temp=0,personflag=Integer.parseInt((String) perTable.getValueAt(perTable.getSelectedRow(), NORMAL));
            for(Community comm : communityMap.values()){
                if(comm.getName() == (String) mpComm.getSelectedItem()){
                    
                    temp = comm.getCommunityId();
                    break;
                }
            }
                System.out.println(temp + "Community ID");
                
                
            
            communityMap.get(personMap.get(personflag).getCommunity()).removePerson(personflag);
            
            for(Person i : personMap.values()){
                if(i.getPersonID() == personflag){
                i.setName(mpName.getText());
                i.setAge(Integer.parseInt(mpAge.getText()));
                i.setGender(mpGender.getSelection().getActionCommand());
                i.setRole((String) mpRole.getSelectedItem());
                i.setCity((String)mpCity.getSelectedItem());
                i.setCommunity(temp);
                }
            }
             
            resetMPerData();
            
            JOptionPane.showMessageDialog(this, "Data Edited");
            for(Community i : communityMap.values()){
                //System.out.println("Going inside");
                if(i.getName()== (String)mpComm.getSelectedItem()){
                    i.addPerson(personflag);
                    //System.out.println("Added Person");
                }
                //System.out.println(i.xyz());
            }
            
            
            showPerTable();
         }
        
    }//GEN-LAST:event_pEditActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        showPerTable();
                mpComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(mpCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                mpComm.addItem(communityMap.get(i).getName());
            
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void perTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_perTableMouseClicked
        // TODO add your handling code here:
        int tempID = Integer.parseInt(perTable.getValueAt(perTable.getSelectedRow(), NORMAL).toString());
        System.out.println(tempID);
        
        String tempCity = (String) perTable.getValueAt(perTable.getSelectedRow(),5 );
        String tempRole = (String) perTable.getValueAt(perTable.getSelectedRow(),4);
        System.out.println(tempCity);
        mpName.setText(personMap.get(tempID).getName());
        mpAge.setText(Integer.toString(personMap.get(tempID).getAge()));
        if((String) perTable.getValueAt(perTable.getSelectedRow(),3)=="Male"){
            mpMale.setSelected(true);
            mpMale.setActionCommand("Male");
        }
        else{
            mpFemale.setSelected(true);
            mpFemale.setActionCommand("Male");
        }
        
        int tempSize = mpCity.getItemCount();
        for(int i=0;i<tempSize;i++){
            if(mpCity.getItemAt(i).toString() == tempCity){
                mpCity.setSelectedIndex(i);
            }
        }
        tempSize = mpRole.getItemCount();
        for(int i=0;i<tempSize;i++){
            if(mpRole.getItemAt(i).toString() == tempRole){
                mpRole.setSelectedIndex(i);
            }
        }
        
        
        mpComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(tempCity== communityMap.get(i).getCity())
                mpComm.addItem(communityMap.get(i).getName());
        }
        for(int i=0; i< mpComm.getItemCount();i++){
            if((String)mpComm.getItemAt(i)== communityMap.get(personMap.get(tempID).getCommunity()).getName()){
                mpComm.setSelectedIndex(i);
                break;
            }
                
        }
        mpHno.setText(Integer.toString(personMap.get(tempID).getHno()));
        
        
        
    }//GEN-LAST:event_perTableMouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        flag=0;
        validateLPerson();
        System.out.println("PERREF in link "+ perref);
        if(flag==0){
        commref = Integer.parseInt((String) lCommTable.getValueAt(lCommTable.getSelectedRow(), NORMAL));
        personMap.get(perref).setCommunity(commref);
        
        communityMap.get(personMap.get(perref).getCommunity()).removePerson(perref);
        communityMap.get(commref).addPerson(perref);
        JOptionPane.showMessageDialog(this, " Link Successful");
        
        
        
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void lPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lPersonActionPerformed
        // TODO add your handling code here:
        cards.show(pnlLayout, "linkPerson");
        setlPTable();
    }//GEN-LAST:event_lPersonActionPerformed

    private void lPTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPTableMouseClicked
        // TODO add your handling code here:
        perref=Integer.parseInt((String) lPTable.getValueAt(lPTable.getSelectedRow(), NORMAL));
        
//        System.out.println("PERREF in link Click" + perref);
//        System.out.println("Community in personClick   "+ personMap.get(perref).getCommunity());
        int x = setlCommTable();
        lCommTable.setRowSelectionInterval(x, x);
        
        
    }//GEN-LAST:event_lPTableMouseClicked

    private void lCommTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lCommTableMouseClicked
        // TODO add your handling code here:
        
        commref=Integer.parseInt((String) lCommTable.getValueAt(lCommTable.getSelectedRow(), NORMAL));
    }//GEN-LAST:event_lCommTableMouseClicked

    private void mhCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mhCityActionPerformed
        // TODO add your handling code here:
        mhComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(mhCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                mhComm.addItem(communityMap.get(i).getName());
        }
    }//GEN-LAST:event_mhCityActionPerformed

    private void hCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hCityActionPerformed
        // TODO add your handling code here:
                hComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(hCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                hComm.addItem(communityMap.get(i).getName());
        }
    }//GEN-LAST:event_hCityActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
                        flag=0;
                
        
         try {
            ValidateHosData();
        } catch (Exception ex) {
            Logger.getLogger(Additions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(flag ==0){
            int temp=0;
            for(Community comm : communityMap.values()){
                if(comm.getName() == (String) hComm.getSelectedItem()){
                    temp = comm.getCommunityId();
                    break;
                }
            }
          System.out.println("Temp in Addition   "+temp);
          hospitalMap.put(hospitalId, new Hospital(hospitalId,hName.getText(), (String) hCity.getSelectedItem(),temp));
            for(Community i : communityMap.values()){
                //System.out.println("Going inside");
                if(i.getName()== (String)hComm.getSelectedItem()){
                    i.addHospital(hospitalId++);
                    System.out.println("Added new Community  "+ hospitalId);
                }
                //System.out.println(i.xyz());
            }

             
            resetHosData();
            
            JOptionPane.showMessageDialog(this, "Data Entered");
            for(Community i : communityMap.values()){
                //System.out.println("Going inside");
                if(i.getName()== (String)pComm.getSelectedItem()){
                    i.addPerson(personId++);
                    //System.out.println("Added Person");
                }
                //System.out.println(i.xyz());
            }
            
            
         }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void hospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hospitalMouseClicked
        showHosTable();
                mhComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(mhCity.getSelectedItem().toString()== communityMap.get(i).getCity())
                mhComm.addItem(communityMap.get(i).getName());
            
        }
        
        
    }//GEN-LAST:event_hospitalMouseClicked

    private void hosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hosTableMouseClicked
        // TODO add your handling code here:
                // TODO add your handling code here:
        int tempID = Integer.parseInt(hosTable.getValueAt(hosTable.getSelectedRow(), NORMAL).toString());
        System.out.println(tempID);
        
        String tempCity = (String) hosTable.getValueAt(hosTable.getSelectedRow(),2 );
        System.out.println(tempCity);
        mhName.setText(hospitalMap.get(tempID).getName());
        
        int tempSize = mhCity.getItemCount();
        for(int i=0;i<tempSize;i++){
            if(mhCity.getItemAt(i).toString() == tempCity){
                mhCity.setSelectedIndex(i);
            }
        }
        
        
        mhComm.removeAllItems();
        for(Integer i : communityMap.keySet()){
            if(tempCity== communityMap.get(i).getCity())
                mhComm.addItem(communityMap.get(i).getName());
        }
        for(int i=0; i< mhComm.getItemCount();i++){
            if((String)mhComm.getItemAt(i)== communityMap.get(hospitalMap.get(tempID).getCommunity()).getName()){
                mhComm.setSelectedIndex(i);
                break;
            }
                
        }
        
        
        
    }//GEN-LAST:event_hosTableMouseClicked

    private void hEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hEditActionPerformed
        // TODO add your handling code here:
            // TODO add your handling code here:
        flag=0;
                
        
         try {
            ValidateMHosData();
        } catch (Exception ex) {
            Logger.getLogger(Additions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(flag ==0){
            int temp=0,hospitalflag=Integer.parseInt((String) hosTable.getValueAt(hosTable.getSelectedRow(), NORMAL));
            for(Community comm : communityMap.values()){
                if(comm.getName() == (String) mhComm.getSelectedItem()){
                    
                    temp = comm.getCommunityId();
                    System.out.println("Community    "+temp);
                    break;
                }
            }
            
                
                
            
            communityMap.get(hospitalMap.get(hospitalflag).getCommunity()).removeHospital(hospitalflag);
            
            for(Hospital i : hospitalMap.values()){
                if(i.getHospitalId()== hospitalflag){
                i.setName(mhName.getText());
                i.setCity((String)mhCity.getSelectedItem());
                i.setCommunity(temp);
                }
            }
             
            resetMHosData();
            
            JOptionPane.showMessageDialog(this, "Data Edited");
            for(Community i : communityMap.values()){
                //System.out.println("Going inside");
                if(i.getName()== (String)mhComm.getSelectedItem()){
                    i.addHospital(hospitalflag);
                    System.out.println("Added new Community  "+ hospitalflag);
                    
                }
                //System.out.println(i.xyz());
            }
            
            
            showHosTable();
         }
    
        
    }//GEN-LAST:event_hEditActionPerformed

    private void linkHospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_linkHospitalMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_linkHospitalMouseClicked

    private void lHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lHospitalActionPerformed
        // TODO add your handling code here:
                cards.show(pnlLayout, "linkHospital");
        setlHTable();
    }//GEN-LAST:event_lHospitalActionPerformed

    private void lHosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lHosTableMouseClicked
        // TODO add your handling code here:
        hosref=Integer.parseInt((String) lHosTable.getValueAt(lHosTable.getSelectedRow(), NORMAL));
        int x = setlHoscommTable();
    }//GEN-LAST:event_lHosTableMouseClicked

    private void hosLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hosLinkActionPerformed
        // TODO add your handling code here:
         flag=0;
        validateLHospital();
        System.out.println("Hosref in link "+ hosref);
        if(flag==0){
        commref = Integer.parseInt((String) lHoscommTable.getValueAt(lHoscommTable.getSelectedRow(), NORMAL));
       
        communityMap.get(commref).addHospital(hosref);
        JOptionPane.showMessageDialog(this, " Link Successful");
        int x = setlHoscommTable();
        }
        
        
        
    }//GEN-LAST:event_hosLinkActionPerformed

    private void hosUnlinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hosUnlinkActionPerformed
        // TODO add your handling code here:
        flag=0;
        validateUnLHospital();
        System.out.println("Hosref in link "+ hosref);
        if(flag==0){
        commref = Integer.parseInt((String) lHoscommTable.getValueAt(lHoscommTable.getSelectedRow(), NORMAL));
        //personMap.get(hosref).setCommunity(commref);
        
        communityMap.get(commref).removeHospital(hosref);
        //if(hospitalMap.get(hosref).get)
        //communityMap.get(commref).addHospital(hosref);
        JOptionPane.showMessageDialog(this, " DeLink Successful");
        int x = setlHoscommTable();
        }
    }//GEN-LAST:event_hosUnlinkActionPerformed

    private void lHoscommTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lHoscommTableMouseClicked
        // TODO add your handling code here:
        
        commref = Integer.parseInt((String) lHoscommTable.getValueAt(lHoscommTable.getSelectedRow(), NORMAL));
        System.out.println("COMM REF IN LHOSCOM IS " + commref);
    }//GEN-LAST:event_lHoscommTableMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
                                flag=0;
                
        
         try {
            ValidateMCommData();
        } catch (Exception ex) {
            Logger.getLogger(Additions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(flag ==0){
            int temp=0,commflag=Integer.parseInt((String) commTable.getValueAt(commTable.getSelectedRow(), NORMAL));

                
      
            
            for(Community i : communityMap.values()){
                if(i.getCommunityId()== commflag){
                i.setName(mcName.getText());
                i.setCity((String)mcCity.getSelectedItem());
                i.setZipcode(mcZip.getText());
                }
            }
             
            resetCommData();
            
            showCommTable();
                JOptionPane.showMessageDialog(this, "Community successfully Edited");
         }
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void lDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lDoctorActionPerformed
        // TODO add your handling code here:
        cards.show(pnlLayout, "linkDoctor");
        setlDTable();
    }//GEN-LAST:event_lDoctorActionPerformed

    private void lDocTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lDocTableMouseClicked
        // TODO add your handling code here:
          docref=Integer.parseInt((String) lDocTable.getValueAt(lDocTable.getSelectedRow(), NORMAL));
        setlDochosTable();
    }//GEN-LAST:event_lDocTableMouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        flag=0;
        validateLDoctor();
        System.out.println("Docref in link "+ docref);
        if(flag==0){
        hosref = Integer.parseInt((String) lHosDocTable.getValueAt(lHosDocTable.getSelectedRow(), NORMAL));
        //personMap.get(hosref).setCommunity(commref);
        
      //communityMap.get(personMap.get(perref).getCommunity()).removePerson(perref);
        hospitalMap.get(hosref).addDoctor(docref);
        JOptionPane.showMessageDialog(this, " Link Successful");
        setlDochosTable();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void deLinkDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deLinkDocActionPerformed
        // TODO add your handling code here:
        flag=0;
        validateUnLDoctor();
        System.out.println("DocLink in link "+ docref);
        if(flag==0){
        hosref = Integer.parseInt((String) lHosDocTable.getValueAt(lHosDocTable.getSelectedRow(), NORMAL));
        //personMap.get(hosref).setCommunity(commref);
        
        hospitalMap.get(hosref).removeDoctor(docref);
        //if(hospitalMap.get(hosref).get)
        //communityMap.get(commref).addHospital(hosref);
        JOptionPane.showMessageDialog(this, " DeLink Successful");
        setlDochosTable();
        }
    }//GEN-LAST:event_deLinkDocActionPerformed

    private void jPanel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel12MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel12MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Additions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Additions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Additions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Additions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Additions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddDoctor;
    private javax.swing.JTabbedPane Encounter;
    private static javax.swing.JPanel addHos;
    private javax.swing.JComboBox<String> cCombo;
    private javax.swing.JTextField cName;
    private javax.swing.JTextField cZip;
    private javax.swing.JButton comSubmit;
    private javax.swing.JTable commTable;
    private javax.swing.JTabbedPane community;
    private javax.swing.JButton deLinkDoc;
    private static javax.swing.JPanel editHos;
    private javax.swing.JComboBox<String> hCity;
    private javax.swing.JComboBox<String> hComm;
    private javax.swing.JButton hEdit;
    private javax.swing.JTextField hName;
    private javax.swing.JButton hosLink;
    private javax.swing.JTable hosTable;
    private javax.swing.JButton hosUnlink;
    private javax.swing.JTabbedPane hospital;
    private static javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton10;
    private static javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton15;
    private static javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSplitPane jSplitPane1;
    private static javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable lCommTable;
    private javax.swing.JTable lDocTable;
    private javax.swing.JButton lDoctor;
    private javax.swing.JTable lHosDocTable;
    private javax.swing.JTable lHosTable;
    private javax.swing.JTable lHoscommTable;
    private javax.swing.JButton lHospital;
    private javax.swing.JTable lPTable;
    private javax.swing.JButton lPerson;
    private javax.swing.JTabbedPane linkDoc;
    private javax.swing.JTabbedPane linkHospital;
    private javax.swing.JTabbedPane linkPerson;
    private javax.swing.JComboBox<String> mcCity;
    private javax.swing.JTextField mcName;
    private javax.swing.JTextField mcZip;
    private javax.swing.JComboBox<String> mhCity;
    private javax.swing.JComboBox<String> mhComm;
    private javax.swing.JTextField mhName;
    private javax.swing.JTextField mpAge;
    private javax.swing.JComboBox<String> mpCity;
    private javax.swing.JComboBox<String> mpComm;
    private javax.swing.JRadioButton mpFemale;
    private javax.swing.ButtonGroup mpGender;
    private javax.swing.JTextField mpHno;
    private javax.swing.JRadioButton mpMale;
    private javax.swing.JTextField mpName;
    private javax.swing.JComboBox<String> mpRole;
    private javax.swing.JTextField pAge;
    private javax.swing.JComboBox<String> pCity;
    private javax.swing.JComboBox<String> pComm;
    private javax.swing.JButton pEdit;
    private javax.swing.JRadioButton pFemale;
    private javax.swing.ButtonGroup pGender;
    private javax.swing.JTextField pHno;
    private javax.swing.JRadioButton pMale;
    private javax.swing.JTextField pName;
    private javax.swing.JComboBox<String> pRole;
    private javax.swing.JButton pSubmit;
    private javax.swing.JButton pUpload;
    private javax.swing.JButton pUpload1;
    private javax.swing.JTable perTable;
    private javax.swing.JPanel person;
    private javax.swing.JPanel pnlLayout;
    // End of variables declaration//GEN-END:variables

    private void resetCommData() {
        cName.setText("");
        cZip.setText("");
    }

    private void ValidateCommData() {
        try {
            if (cName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter name");
            flag = 1;
        }
        
        if(flag==0){
            try {
                if (cZip.getText().equals("")) {
                    throw new Exception("Zipcode not entered");
                }
            } catch (Exception e) { //exception handling
                JOptionPane.showMessageDialog(this, "Please enter Zipcode");
                flag = 1;
            }
        }

        
     
    }

    private void ValidatePerData() {
                try {
            if (pName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter name");
            flag = 1;
        }
        

        if (flag == 0) {
            try {
                if (pAge.getText().equals("") || !Pattern.matches("[1-9]{1}[0-9]{1}", pAge.getText())) {
                    throw new Exception("Incorrect age");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Age");
                flag = 1;
            }
        }
        if (flag == 0) {
            try {
                String gen;
                if(pMale.isSelected()==false && pFemale.isSelected()==false)
                    throw new Exception("Gender not selected");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gender not selected");
                
                flag = 1;
            }
        }
        if(flag==0){
            try {
                if (pHno.getText().equals("")) {
                    throw new Exception("House no not entered");
                }
            } catch (Exception e) { //exception handling
                JOptionPane.showMessageDialog(this, "Please enter House no");
                flag = 1;
            }
        }
    }

    private void resetPerData() {
        pName.setText("");
        pAge.setText("");
        pHno.setText("");
    }

    private void showPerTable() {
        int index = 0;
        String[][] data = new String[personMap.size()][8];
        for ( Person temp : personMap.values()){
        data[index][0]= Integer.toString(temp.getPersonID());
        data[index][1]= temp.getName();
        data[index][2]= Integer.toString(temp.getAge());
        data[index][3]=temp.getGender();
        data[index][4]= temp.getRole();
        data[index][5]=temp.getCity();
        data[index][6]= communityMap.get(temp.getCommunity()).getName();
        data[index][7]= Integer.toString(temp.getHno());
        index++;
        }

        String[] col = {"Person Id", "Name", "Age","Gender","Role", "City","Community","House Number"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        perTable.setModel(model);
    }

    private void ValidateMPerData() {
        try {
            if (mpName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter name");
            flag = 1;
        }
        

        if (flag == 0) {
            try {
                if (mpAge.getText().equals("") || !Pattern.matches("[1-9]{1}[0-9]{1}", mpAge.getText())) {
                    throw new Exception("Incorrect age");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Age");
                flag = 1;
            }
        }
        if (flag == 0) {
            try {
                String gen;
                if(mpMale.isSelected()==false && mpFemale.isSelected()==false)
                    throw new Exception("Gender not selected");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gender not selected");
                
                flag = 1;
            }
        }
        if(flag==0){
            try {
                if (mpHno.getText().equals("")) {
                    throw new Exception("House no not entered");
                }
            } catch (Exception e) { //exception handling
                JOptionPane.showMessageDialog(this, "Please enter House no");
                flag = 1;
            }
        }
    }

    private void resetMPerData() {
        mpName.setText("");
        mpAge.setText("");
        mpHno.setText("");
        
    }

    private void setlPTable() {
                int index = 0;
        String[][] data = new String[personMap.size()][2];
        for ( Person temp : personMap.values()){
        data[index][0]= Integer.toString(temp.getPersonID());
        data[index][1]= temp.getName();
        index++;
        }

        String[] col = {"Person ID", "Person Name"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        lPTable.setModel(model);
   
    
    }

    private int setlCommTable() {
        int index = 0;
        int var=0;
        String[][] data = new String[communityMap.size()][2];
        for ( Community temp : communityMap.values()){
            if(temp.getCommunityId()==personMap.get(perref).getCommunity())
                var=index;
            
            if(temp.getCity()== personMap.get(perref).getCity()){
                data[index][0]= Integer.toString(temp.getCommunityId());
                data[index][1]= temp.getName();
                index++;
            }
        }

        String[] col = {"Community ID", "Community Name"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        lCommTable.setModel(model);
        return var;
   
 
    }

    private void validateLPerson() {
         try {
            if (Integer.parseInt((String) lCommTable.getValueAt(lCommTable.getSelectedRow(), NORMAL))== -1) {
                throw new Exception("Community Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Community to Link");
            flag = 1;
        }
        
        
    }

    private void ValidateHosData() {
        
        try {
            if (hName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter Hospital Name");
            flag = 1;
        }
        
    
    
    }

    private void resetHosData() {
            hName.setText("");
    }

    private void showHosTable() {
        int index = 0;
        String[][] data = new String[hospitalMap.size()][4];
        for ( Hospital temp : hospitalMap.values()){
        data[index][0]= Integer.toString(temp.getHospitalId());
        data[index][1]= temp.getName();
        data[index][2]=temp.getCity();
        data[index][3]= communityMap.get(temp.getCommunity()).getName();
        index++;
        }

        String[] col = {"Hospital ID", "Hospital Name", "City","Community"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        hosTable.setModel(model);
    
    }

    private void resetMHosData() {
        
            mhName.setText("");
    }

    private void ValidateMHosData() {
                try {
            if (mhName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter Hospital Name");
            flag = 1;
        }
    }

    private void setlHTable() {
        int index = 0;
        String[][] data = new String[hospitalMap.size()][2];
        for ( Hospital temp : hospitalMap.values()){
        data[index][0]= Integer.toString(temp.getHospitalId());
        data[index][1]= temp.getName();
        index++;
        }

        String[] col = {"Hospital ID", "Hospital Name"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        lHosTable.setModel(model);
    }

    private int setlHoscommTable() {
        int index = 0;
        int var=0;
        String[][] data = new String[communityMap.size()][3];
        for ( Community temp : communityMap.values()){
            if(temp.getCommunityId()==hospitalMap.get(hosref).getCommunity())
                var=index;
            
            if(temp.getCity()== hospitalMap.get(hosref).getCity()){
                System.out.println(temp.hospitalExists(hosref));
                if(temp.hospitalExists(hosref)){
                data[index][0]= Integer.toString(temp.getCommunityId());
                data[index][1]= temp.getName();
                data[index][2]= "Linked";
                index++;
                }
                else{
                data[index][0]= Integer.toString(temp.getCommunityId());
                data[index][1]= temp.getName();
                data[index][2]="Not Linked";
                index++;
                
                }
            }
        }

        String[] col = {"Community ID", "Community Name", "Status"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        lHoscommTable.setModel(model);
        return var;
    }

    private void validateLHospital() {
        try {
            if (Integer.parseInt((String) lHosTable.getValueAt(lHosTable.getSelectedRow(), NORMAL))== -1) {
                throw new Exception("Hospital Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Hospital to Link");
            flag = 1;
        }
        if(flag==0){
        try {
            if (Integer.parseInt((String) lHoscommTable.getValueAt(lHoscommTable.getSelectedRow(), NORMAL))== -1) {
                throw new Exception("Community Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Community to Link");
            flag = 1;
        }
        
        }
    }

    private void validateUnLHospital() {
        try {
            if (Integer.parseInt((String) lHoscommTable.getValueAt(lHoscommTable.getSelectedRow(), NORMAL)) ==-1) {
                throw new Exception("Community Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Community to Link");
            flag = 1;
        }
        if(flag == 0 ){
            try {
                System.out.println("Hosref community is "+ hospitalMap.get(hosref).getCommunity()+ " Commref  ");
            if (hospitalMap.get(hosref).getCommunity() == commref) {
                throw new Exception("Cannot remove parent Community");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Parent Community Cannot be unlinked");
            flag = 1;
        }
            
        if(flag==0){
            try {
            if ((String)lHoscommTable.getValueAt(lHoscommTable.getSelectedRow(), 2) == "Not Linked") {
                throw new Exception("Hospital Already Unlinked");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Hospital is already not Linked");
            flag = 1;
        }
        
        }
        
        }
    }

    private void ValidateMCommData() {
        System.out.println("Commref in validcomm " + commref);
                System.out.println("Comm City" + communityMap.get(commref).getCity() + " Selected City" + (String) mcCity.getSelectedItem() );
         try {
            if (mcName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter Name");
            flag = 1;
        }
        
        if(flag==0){
            try {
                if (mcZip.getText().equals("")) {
                    throw new Exception("Zipcode not entered");
                }
            } catch (Exception e) { //exception handling
                JOptionPane.showMessageDialog(this, "Please enter Zipcode");
                flag = 1;
            }
        }
        if(flag==0){
            try {
                if (communityMap.get(commref).getCity() != (String) mcCity.getSelectedItem()) {
                    if(communityMap.get(commref).hospitalLength() !=0)
                        throw new Exception("Hospital Length not 0");
                }
            } catch (Exception e) { //exception handling
                JOptionPane.showMessageDialog(this, "Unlink hospitals before Changing City");
                flag = 1;
            }
        }
        if(flag==0){
            try {
                if (communityMap.get(commref).getCity() != (String) mcCity.getSelectedItem()) {
                    if(communityMap.get(commref).personLength() !=0)
                        throw new Exception("Persons Length not 0");
                }
            } catch (Exception e) { //exception handling
                JOptionPane.showMessageDialog(this, "Unlink Persons before Changing City");
                flag = 1;
            }
        }
        
    
    }

    private void setlDTable() {
        int index = 0;
        String[][] data = new String[doctorMap.size()][2];
        for ( Doctor temp : doctorMap.values()){
        data[index][0]= Integer.toString(temp.getDocterId());
        data[index][1]= personMap.get(temp.getDocterId()).getName();
        index++;
        }

        String[] col = {"Doctor ID", "Doctor Name"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        lDocTable.setModel(model);
    }

    private void setlDochosTable() {
        int index = 0;
        int var=0;
        String[][] data = new String[hospitalMap.size()][3];
        for ( Hospital temp : hospitalMap.values()){
            
            if(temp.getCity()== personMap.get(docref).getCity()){
                System.out.println(temp.docExists(docref));
                if(temp.docExists(docref)){
                data[index][0]= Integer.toString(temp.getHospitalId());
                data[index][1]= temp.getName();
                data[index][2]= "Linked";
                index++;
                }
                else{
                data[index][0]= Integer.toString(temp.getHospitalId());
                data[index][1]= temp.getName();
                data[index][2]="Not Linked";
                index++;
                
                }
            }
        }

        String[] col = {"Hospital ID", "Hospital Name", "Status"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        lHosDocTable.setModel(model);
         
    }

    private void validateLDoctor() {
         try {
            if (Integer.parseInt((String) lDocTable.getValueAt(lDocTable.getSelectedRow(), NORMAL))== -1) {
                throw new Exception("Doctor Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Doctor to Link");
            flag = 1;
        }
        if(flag==0){
        try {
            if (Integer.parseInt((String) lHosDocTable.getValueAt(lHosDocTable.getSelectedRow(), NORMAL))== -1) {
                throw new Exception("Hospital Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Hospital to Link");
            flag = 1;
        }
        
        }}

    private void validateUnLDoctor() {
        
        try {
            if (Integer.parseInt((String) lHosDocTable.getValueAt(lHosDocTable.getSelectedRow(), NORMAL)) ==-1) {
                throw new Exception("Hos Link not selected");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Select Hospital to Link");
            flag = 1;
        }
        
            
        if(flag==0){
            try {
            if ((String)lHosDocTable.getValueAt(lHosDocTable.getSelectedRow(), 2) == "Not Linked") {
                throw new Exception("Doctor Already Unlinked");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Doctor is already not Linked");
            flag = 1;
        }
        
        }
        
        }
    



}
