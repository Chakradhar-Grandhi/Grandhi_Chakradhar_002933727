/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.view;

import com.model.ContactInfo;
import com.model.Employee;
import com.model.Exceptions;
import java.awt.Image;
import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author just_chakri
 */
public class test extends javax.swing.JFrame {
    int empID=1001;
    int flag=0;
    String imagePath;
    boolean modifyBool = false;
    
    
    
    //Data Population
    
    List<Employee> empDetails= new ArrayList<>();
    boolean a = empDetails.add(new Employee(empID++, "Lionel Messi", 34, "Male",
            "2019-09-05", 
            "L1", "Cisco", "Manager", new ContactInfo("7538882245", "lionelmessi@gmail.com"),"./uploads/Images/messi.jpeg"));
    boolean b = empDetails.add(new Employee(empID++, "Neymar", 30, "Male",
            "2021-01-12",
    "L2", "Infosys", "Lead", new ContactInfo("6281537224", "neynarjr@gmail.com"),"./uploads/Images/neymar.jpeg"));
    boolean c = empDetails.add(new Employee(empID++, "Cristiano Ronaldo", 35, "Male",
            "2020-04-28",
    "L2", "Wipro", "Engineer", new ContactInfo("9848055885", "cristiano@gmail.com"),"./uploads/Images/ronaldo.jpeg"));
    

   
    public test() {
        initComponents();
        resetData();
        setEmployeeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        levelGroup = new javax.swing.ButtonGroup();
        positionGroup = new javax.swing.ButtonGroup();
        mGenderGroup = new javax.swing.ButtonGroup();
        mLevelGroup = new javax.swing.ButtonGroup();
        mPositionGroup = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        name = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        startDate = new javax.swing.JTextField();
        teamInfo = new javax.swing.JTextField();
        phone = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        submit = new javax.swing.JButton();
        level1 = new javax.swing.JRadioButton();
        level2 = new javax.swing.JRadioButton();
        level3 = new javax.swing.JRadioButton();
        level4 = new javax.swing.JRadioButton();
        manager = new javax.swing.JRadioButton();
        lead = new javax.swing.JRadioButton();
        engineer = new javax.swing.JRadioButton();
        picupload = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        update = new javax.swing.JButton();
        mEmail = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        mContact = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        mTeamInfo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        mStartDate = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        mAge = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        mName = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        mMale = new javax.swing.JRadioButton();
        mFemale = new javax.swing.JRadioButton();
        mLevel1 = new javax.swing.JRadioButton();
        mLevel2 = new javax.swing.JRadioButton();
        mLevel3 = new javax.swing.JRadioButton();
        mLevel4 = new javax.swing.JRadioButton();
        mManager = new javax.swing.JRadioButton();
        mLead = new javax.swing.JRadioButton();
        mEngineer = new javax.swing.JRadioButton();
        imgLabel = new javax.swing.JLabel();
        search = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        startDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateActionPerformed(evt);
            }
        });

        jLabel1.setText("Name");

        jLabel2.setText("Age");

        jLabel3.setText("Gender");

        jLabel4.setText("Start Date");

        jLabel5.setText("Level");

        jLabel6.setText("Team Information");

        jLabel7.setText("Positon");

        jLabel8.setText("Contact Number");

        jLabel9.setText("Email");

        jLabel10.setText("Photo Upload");

        genderGroup.add(male);
        male.setText("Male");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        genderGroup.add(female);
        female.setText("Female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        levelGroup.add(level1);
        level1.setText("Level1");
        level1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level1ActionPerformed(evt);
            }
        });

        levelGroup.add(level2);
        level2.setText("Level2");
        level2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level2ActionPerformed(evt);
            }
        });

        levelGroup.add(level3);
        level3.setText("Level3");
        level3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level3ActionPerformed(evt);
            }
        });

        levelGroup.add(level4);
        level4.setText("Level4");
        level4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level4ActionPerformed(evt);
            }
        });

        positionGroup.add(manager);
        manager.setText("Manager");
        manager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerActionPerformed(evt);
            }
        });

        positionGroup.add(lead);
        lead.setText("Lead");
        lead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leadActionPerformed(evt);
            }
        });

        positionGroup.add(engineer);
        engineer.setText("Engineer");
        engineer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineerActionPerformed(evt);
            }
        });

        picupload.setText("Upload Pic");
        picupload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picuploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(361, 361, 361)
                .addComponent(submit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(male)
                                .addGap(18, 18, 18)
                                .addComponent(female))
                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(teamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(manager)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(engineer))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(level1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(level2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(level3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(level4))
                            .addComponent(picupload))))
                .addGap(100, 100, 100))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(male)
                    .addComponent(female))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(level1)
                    .addComponent(level2)
                    .addComponent(level3)
                    .addComponent(level4))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(manager)
                    .addComponent(lead)
                    .addComponent(engineer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(picupload))
                .addGap(21, 21, 21)
                .addComponent(submit)
                .addContainerGap(381, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Employee Details", jPanel1);

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Name", "Age", "Gender", "Start Date", "Level", "Team", "Position", "Contact", "Email"
            }
        ));
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employeeTable);

        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        mEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mEmailActionPerformed(evt);
            }
        });

        jLabel12.setText("Email");

        jLabel13.setText("Contact Number");

        jLabel14.setText("Position");

        mTeamInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mTeamInfoActionPerformed(evt);
            }
        });

        jLabel15.setText("Team Information");

        jLabel16.setText("Level");

        jLabel17.setText("StartDate");

        jLabel18.setText("Gender");

        jLabel19.setText("Age");

        mName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mNameActionPerformed(evt);
            }
        });

        jLabel20.setText("Name");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        mGenderGroup.add(mMale);
        mMale.setText("Male");
        mMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mMaleActionPerformed(evt);
            }
        });

        mGenderGroup.add(mFemale);
        mFemale.setText("Female");
        mFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mFemaleActionPerformed(evt);
            }
        });

        mLevelGroup.add(mLevel1);
        mLevel1.setText("Level 1");
        mLevel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLevel1ActionPerformed(evt);
            }
        });

        mLevelGroup.add(mLevel2);
        mLevel2.setText("Level 2");
        mLevel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLevel2ActionPerformed(evt);
            }
        });

        mLevelGroup.add(mLevel3);
        mLevel3.setText("Level 3");
        mLevel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLevel3ActionPerformed(evt);
            }
        });

        mLevelGroup.add(mLevel4);
        mLevel4.setText("Level 4");
        mLevel4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLevel4ActionPerformed(evt);
            }
        });

        mPositionGroup.add(mManager);
        mManager.setText("Manager");
        mManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mManagerActionPerformed(evt);
            }
        });

        mPositionGroup.add(mLead);
        mLead.setText("Lead");
        mLead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLeadActionPerformed(evt);
            }
        });

        mPositionGroup.add(mEngineer);
        mEngineer.setText("Engineer");
        mEngineer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mEngineerActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(update)
                        .addGap(167, 167, 167)
                        .addComponent(delete)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addGap(89, 89, 89)
                                            .addComponent(mContact, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel12)
                                            .addGap(152, 152, 152)
                                            .addComponent(mEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel14))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel15)
                                                .addGap(84, 84, 84))
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel19)
                                                    .addComponent(jLabel18)
                                                    .addComponent(jLabel17)
                                                    .addComponent(jLabel16)
                                                    .addComponent(jLabel20))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(mManager)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(mLead)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(mEngineer))
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(mTeamInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                                                .addComponent(mStartDate)
                                                .addComponent(mAge)
                                                .addComponent(mName)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addComponent(mMale)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(mFemale))
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addComponent(mLevel1)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(mLevel2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(mLevel3)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(mLevel4))))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(search)
                                .addGap(286, 286, 286)))
                        .addComponent(imgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(search)
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(mName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19)
                            .addComponent(mAge, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(mMale)
                                    .addComponent(mFemale)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(imgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17)
                    .addComponent(mStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(mLevel1)
                    .addComponent(mLevel2)
                    .addComponent(mLevel3)
                    .addComponent(mLevel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(mTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(mManager)
                    .addComponent(mLead)
                    .addComponent(mEngineer))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(mContact, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(69, 69, 69)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update)
                    .addComponent(delete))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Modify Employee Details", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void MDatasetEditable(boolean bool){
        
    if(bool){
        mName.setEditable(true);
        mAge.setEditable(true);
        mStartDate.setEditable(true);
        mTeamInfo.setEditable(true);
        mContact.setEditable(true);
        mEmail.setEditable(true);
        
    }
    else{
        mName.setEditable(false);
        mAge.setEditable(false);
        mGenderGroup.clearSelection();
        mStartDate.setEditable(false);
        mLevelGroup.clearSelection();
        mTeamInfo.setEditable(false);
        mPositionGroup.clearSelection();
        mContact.setEditable(false);
        mEmail.setEditable(false);
    }
    }
    
    
    public void resetData(){
        name.setText("");
        age.setText("");
        startDate.setText("");
        genderGroup.clearSelection();
        levelGroup.clearSelection();
        positionGroup.clearSelection();       
        email.setText("");
        phone.setText("");
        teamInfo.setText("");
        teamInfo.setText("");
    
    }
public void resetMData(){
        mName.setText("");
        mAge.setText("");
        mStartDate.setText("");
        mGenderGroup.clearSelection();
        mLevelGroup.clearSelection();
        mPositionGroup.clearSelection();       
        mEmail.setText("");
        mContact.setText("");
        mTeamInfo.setText("");
        mTeamInfo.setText("");
    
    }


public void DisplayData(Employee emp){
    mName.setText(emp.getName());
    mAge.setText(emp.getAge()+"");
    
    if(emp.getGender() == "Male")
        mMale.setSelected(true);
    else
        mFemale.setSelected(true);
    mStartDate.setText(emp.getStartDate());
    if(emp.getLevel()=="L1")
        mLevel1.setSelected(true);
    else if(emp.getLevel()=="L2")
        mLevel2.setSelected(true);
    else if(emp.getLevel()=="L3")
        mLevel3.setSelected(true);
    else 
        mLevel4.setSelected(true);
    
    mTeamInfo.setText(emp.getTeamInfo());
    
    if(emp.getPositionTitle()=="Manager")
        mManager.setSelected(true);
    else if(emp.getPositionTitle()=="Lead")
        mLead.setSelected(true);
    else
        mEngineer.setSelected(true);
    
    mContact.setText(emp.getContactInfo().getContactNumber());
    mEmail.setText(emp.getContactInfo().getEmail());
    
    imgLabel.setIcon(new ImageIcon(new ImageIcon(emp.getImage()).getImage().getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), Image.SCALE_SMOOTH)));
    
    
    
    
}
    public Employee fetchData(){
        
        int tempID = Integer.parseInt(employeeTable.getValueAt(employeeTable.getSelectedRow(), NORMAL).toString());
        for(Employee index : empDetails){
            if (index.getEmployeeID() == tempID)
                return index;
        }     
        return null;
    }

    private void UpdateData(Employee tempEmp) {
        int tempFlag=0;
    
        for(Employee index: empDetails){
            if(index.getEmployeeID()==tempEmp.getEmployeeID()){
                
                index.setName(mName.getText());
                index.setAge(Integer.parseInt(mAge.getText()));
                index.setStartDate(mStartDate.getText());
                if((index.getGender()== "Male" && mMale.isSelected()==false) ||(index.getGender()== "Female" && mFemale.isSelected()==false) )
                    index.setGender(mGenderGroup.getSelection().getActionCommand());
                index.setTeamInfo(mTeamInfo.getText());
                
                if((index.getLevel()=="L1" && mLevel1.isSelected() == false) || (index.getLevel()=="L2" && mLevel2.isSelected() == false) || (index.getLevel()=="L3" && mLevel3.isSelected() == false) || (index.getLevel()=="L4" && mLevel4.isSelected() == false) )
                     index.setLevel(mLevelGroup.getSelection().getActionCommand());
                if((index.getPositionTitle()=="Manager" && mManager.isSelected() == false) || (index.getPositionTitle()=="Lead" && mLead.isSelected() == false) ||(index.getPositionTitle()=="Engineer" && mEngineer.isSelected() == false) )
                    index.setPositionTitle(mPositionGroup.getSelection().getActionCommand());
                index.setContactInfo(new ContactInfo(mContact.getText(),mEmail.getText()));
                setEmployeeTable();
                if(tempFlag==0){
                    
                    JOptionPane.showMessageDialog(this, "Details Successfully Updated");
                }
                else{
                    JOptionPane.showMessageDialog(this, "No Details to Update");
                    
                
                }
                resetMData();
                break;
                
                
                
            }
        }
    }
    
    public void DeleteData(Employee tempEmp){
           for(Employee index: empDetails){
            if(index.getEmployeeID()==tempEmp.getEmployeeID()){
                empDetails.remove(empDetails.indexOf(index));
                
                resetMData();
                setEmployeeTable();
                break;
                
                
                
            }
        }
    }
    private void ValidateData() throws Exception {
        
        try {
            if (name.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter name");
            resetData();
            flag = 1;
        }

        
        if (flag == 0) {
            try {
                if (age.getText().equals("") || !Pattern.matches("[1-9]{1}[0-9]{1}", age.getText())) {
                    throw new Exception("Incorrect age");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Age");
                resetData();
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                String gen;
                if(male.isSelected()==false && female.isSelected()==false)
                    throw new Exception("Gender not selected");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gender not selected");
                resetData();
                flag = 1;
            }
        }
        
        if (flag == 0) {
            try {
                if (Pattern.matches("[1-2]{1}[0-9]{3}-[0-1]{1}[0-9]{1}-[0-3]{1}[0-9]{1}", startDate.getText()) == false) {
                    throw new Exception("Incorrect Date format");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Enter valid date of format(YYYY-MM-DD)");
                resetData();
                flag = 1;
            }
        }
        if (flag == 0) {
            LocalDate date = LocalDate.parse(startDate.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            try {
                if (LocalDate.now().compareTo(date) < 0) {  //validation for future date
                    throw new Exception("Date invalid. Date should not be in future");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Date invalid. Date should not be in future");
                resetData();
                flag = 1;
            }
        }
        
        if (flag == 0) {
            try {
                if((level1.isSelected()==false) && (level2.isSelected()==false) && (level3.isSelected()==false) && (level4.isSelected()==false) )
                        throw new Exception("Level not Selected");
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Level not Selected");
                resetData();
                flag = 1;
            }
        }
        
        if (flag == 0) {
            try {
                if (teamInfo.getText().equals("")) {
                    throw new Exception("Enter Team Information");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, " Enter team Information");
                resetData();
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                if((manager.isSelected() == false) && (engineer.isSelected() == false) && (lead.isSelected() == false) )
                throw new Exception("Position not Selected");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Position not Selected");
                resetData();
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                if (Pattern.matches("[1-9]{1}[0-9]{9}", phone.getText())) { //number validation
                } else {
                    throw new Exception("Invalid Number");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, " Invalid Number");
                resetData();
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                if (Pattern.matches("^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$", email.getText())) {
                } else {
                    throw new Exception("Invalid Email");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Email");
                resetData();
                flag = 1;
            }
        }
    }
    
    private void ValidateMData() throws Exception {
        
        try {
            if (mName.getText().equals("")) {
                throw new Exception("name not entered");
            }
        } catch (Exception e) { //exception handling
            JOptionPane.showMessageDialog(this, "Please enter name");
            flag = 1;
        }

        
        if (flag == 0) {
            try {
                if (mAge.getText().equals("") || !Pattern.matches("[1-9]{1}[0-9]{1}", mAge.getText())) {
                    throw new Exception("Incorrect age");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please enter Valid Age");
                flag = 1;
            }
        }

        //GenderField Validation
        if (flag == 0) {
            try {
                String gen;
                if(mMale.isSelected()==false && mFemale.isSelected()==false)
                    throw new Exception("Gender not selected");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gender not selected");
                flag = 1;
            }
        }
        //Date Validation
        if (flag == 0) {
            try {
                if (Pattern.matches("[1-2]{1}[0-9]{3}-[0-1]{1}[0-9]{1}-[0-3]{1}[0-9]{1}", mStartDate.getText()) == false) {
                    throw new Exception("Incorrect Date format");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Enter valid date of format(YYYY-MM-DD)");
                
                flag = 1;
            }
        }
        if (flag == 0) {
            LocalDate date = LocalDate.parse(mStartDate.getText(), DateTimeFormatter.ofPattern("yyyy-MM-dd"));
            try {
                if (LocalDate.now().compareTo(date) < 0) {  //validation for future date
                    throw new Exception("Date invalid. Date should not be in future");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Date invalid. Date should not be in future");
                
                flag = 1;
            }
        }
        //level Field Validation
        if (flag == 0) {
            try {
                if((mLevel1.isSelected()==false) && (mLevel2.isSelected()==false) && (mLevel3.isSelected()==false) && (mLevel4.isSelected()==false) )
                        throw new Exception("Level not Selected");
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Level not Selected");
                flag = 1;
            }
        }
        
        if (flag == 0) {
            try {
                if (mTeamInfo.getText().equals("")) {
                    throw new Exception("Enter Team Information");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, " Enter team Information");
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                if((mManager.isSelected() == false) && (mEngineer.isSelected() == false) && (mLead.isSelected() == false) )
                throw new Exception("Position not Selected");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Position not Selected");
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                if (Pattern.matches("[1-9]{1}[0-9]{9}", mContact.getText())) { //number validation
                } else {
                    throw new Exception("Invalid Number");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, " Invalid Number");
                flag = 1;
            }
        }

        
        if (flag == 0) {
            try {
                if (Pattern.matches("^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$", mEmail.getText())) {
                } else {
                    throw new Exception("Invalid Email");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Email");
                flag = 1;
            }
        }
    }

    private void setSearchTable(List<Employee> searchList) {
          int index = 0;
        String[][] data = new String[searchList.size()][10];
        Collections.sort(searchList, new SortById());
        for (Employee e : searchList) {
            data[index][0] = e.getEmployeeID() + "";
            data[index][1] = e.getName();
            data[index][2] = String.valueOf(e.getAge());
            data[index][3] = e.getGender();
            data[index][4] = e.getStartDate();
            data[index][5] = e.getLevel();
            data[index][6] = e.getTeamInfo();
            data[index][7] = e.getPositionTitle();
            data[index][8] = e.getContactInfo().getContactNumber();
            data[index][9] = e.getContactInfo().getEmail();
            index++;
        }

        String[] col = {"ID", "Name", "Age", "Gender", "Start Date", "Level", "Team Information",
            "Position", "Contact Number", "Email"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        employeeTable.setModel(model);
        
    }

 

class SortById implements Comparator<Employee> {

        public int compare(Employee a, Employee b) {
            return a.getEmployeeID() - b.getEmployeeID();
        }
    }

    private void setEmployeeTable() {
        int index = 0;
        String[][] data = new String[empDetails.size()][10];
        Collections.sort(empDetails, new SortById());
        for (Employee e : empDetails) {
            data[index][0] = e.getEmployeeID() + "";
            data[index][1] = e.getName();
            data[index][2] = String.valueOf(e.getAge());
            data[index][3] = e.getGender();
            data[index][4] = e.getStartDate();
            data[index][5] = e.getLevel();
            data[index][6] = e.getTeamInfo();
            data[index][7] = e.getPositionTitle();
            data[index][8] = e.getContactInfo().getContactNumber();
            data[index][9] = e.getContactInfo().getEmail();
            index++;
        }

        String[] col = {"ID", "Name", "Age", "Gender", "Start Date", "Level", "Team Information",
            "Position", "Contact Number", "Email"};

        DefaultTableModel model = new DefaultTableModel(data, col);
        employeeTable.setModel(model);
    }
    private void startDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startDateActionPerformed

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
        
        male.setActionCommand("Male");
        
    }//GEN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
        
        female.setActionCommand("Female");
        
    }//GEN-LAST:event_femaleActionPerformed

    private void mTeamInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mTeamInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mTeamInfoActionPerformed

    private void mEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mEmailActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // TODO add your handling code here:
        flag = 0;
         try {
            ValidateData();
        } catch (Exception ex) {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
        }
         if(flag ==0){
            empDetails.add(new Employee(empID++, name.getText(),Integer.parseInt(age.getText()),genderGroup.getSelection().getActionCommand(), startDate.getText(),levelGroup.getSelection().getActionCommand(),teamInfo.getText(),positionGroup.getSelection().getActionCommand(), new ContactInfo (phone.getText(),email.getText()),imagePath));
             System.err.println(imagePath);
             
            resetData();
            setEmployeeTable();
         }
        
        
    }//GEN-LAST:event_submitActionPerformed

    private void level3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level3ActionPerformed
        // TODO add your handling code here:
        level3.setActionCommand("L3");
    }//GEN-LAST:event_level3ActionPerformed

    private void level1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level1ActionPerformed
        // TODO add your handling code here:
        
        level1.setActionCommand("L1");
    }//GEN-LAST:event_level1ActionPerformed

    private void level2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level2ActionPerformed
        // TODO add your handling code here:
       level2.setActionCommand("L2");
    }//GEN-LAST:event_level2ActionPerformed

    private void level4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level4ActionPerformed
        // TODO add your handling code here:
        level4.setActionCommand("L4");
    }//GEN-LAST:event_level4ActionPerformed

    private void engineerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineerActionPerformed
        // TODO add your handling code here:
        engineer.setActionCommand("Engineer");
    }//GEN-LAST:event_engineerActionPerformed

    private void managerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerActionPerformed
        // TODO add your handling code here:
        manager.setActionCommand("Manager");
    }//GEN-LAST:event_managerActionPerformed

    private void leadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leadActionPerformed
        // TODO add your handling code here:
        lead.setActionCommand("Lead");
    }//GEN-LAST:event_leadActionPerformed

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked
        // TODO add your handling code here:
       Employee tempEmp = fetchData();
       DisplayData(tempEmp);
       
       
       
        
    }//GEN-LAST:event_employeeTableMouseClicked

    private void mLevel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLevel1ActionPerformed
        // TODO add your handling code here:
        mLevel1.setActionCommand("L1");
    }//GEN-LAST:event_mLevel1ActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        
        if(modifyBool){
                 flag = 0;
        try {
           ValidateMData();
        } catch (Exception ex) {
            Logger.getLogger(test.class.getName()).log(Level.SEVERE, null, ex);
       }
        if(flag ==0){
            Employee tempEmp = fetchData();
            
            UpdateData(tempEmp);
            modifyBool=false;
            MDatasetEditable(modifyBool);
            
        }
            
            
        }
        else{
            if(employeeTable.getSelectedRow() == -1){
                           try {
                                if(employeeTable.getSelectedRow() == -1 )
                                throw new Exception("Select a row to Update");
                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(this, "Select a row to Update.");
                            }
            
            }
            else{
                     modifyBool=true;
                    JOptionPane.showMessageDialog(this, "Feilds are now Editable.Edit them and click on Update.");
                    MDatasetEditable(modifyBool);
                
            }
        
        }   
        
        
        
    }//GEN-LAST:event_updateActionPerformed

    private void mMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mMaleActionPerformed
        // TODO add your handling code here:
        mMale.setActionCommand("Male");
    }//GEN-LAST:event_mMaleActionPerformed

    private void mFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mFemaleActionPerformed
        // TODO add your handling code here:
        mFemale.setActionCommand("Female");
    }//GEN-LAST:event_mFemaleActionPerformed

    private void mLevel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLevel2ActionPerformed
        // TODO add your handling code here:
        mLevel2.setActionCommand("L2");
    }//GEN-LAST:event_mLevel2ActionPerformed

    private void mLevel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLevel3ActionPerformed
        // TODO add your handling code here:
        mLevel3.setActionCommand("L3");
    }//GEN-LAST:event_mLevel3ActionPerformed

    private void mLevel4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLevel4ActionPerformed
        // TODO add your handling code here:
        mLevel4.setActionCommand("L4");
    }//GEN-LAST:event_mLevel4ActionPerformed

    private void mManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mManagerActionPerformed
        // TODO add your handling code here:
        mManager.setActionCommand("Manager");
    }//GEN-LAST:event_mManagerActionPerformed

    private void mLeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLeadActionPerformed
        // TODO add your handling code here:
        mLead.setActionCommand("Lead");
    }//GEN-LAST:event_mLeadActionPerformed

    private void mEngineerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mEngineerActionPerformed
        // TODO add your handling code here:
        mEngineer.setActionCommand("Engineer");
    }//GEN-LAST:event_mEngineerActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
                    if(employeeTable.getSelectedRow() == -1){
                           try {
                                if(employeeTable.getSelectedRow() == -1 )
                                throw new Exception("Select a row to Delete");
                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(this, "Select a row to Delete.");
                            }
            
            }
            else{
                     
                     Employee tempEmp = fetchData();
                    DeleteData(tempEmp);
                    setEmployeeTable();
                
            }

    }//GEN-LAST:event_deleteActionPerformed

    private void mNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mNameActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        setEmployeeTable();
        
    MDatasetEditable(false);
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void picuploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picuploadActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        JFileChooser chose = new JFileChooser();
        FileNameExtensionFilter photoExtFilter = new FileNameExtensionFilter("Picture", "png", "jpg", "jpeg");
        chose.setFileFilter(photoExtFilter);
        int JFileResponse = chose.showOpenDialog(null);
        if (JFileResponse == JFileChooser.APPROVE_OPTION) {
            File file = chose.getSelectedFile();
            try {
                if (file.getName().endsWith("png") || file.getName().endsWith("jpg") || file.getName().endsWith("jpeg")) {
                    imagePath = file.getAbsolutePath();
                   // imgLabel.setIcon(new ImageIcon(new ImageIcon(file.toString()).getImage().getScaledInstance(imgLabel.getWidth(), imgLabel.getHeight(), Image.SCALE_SMOOTH)));

                } else {
                    throw new Exception("Invalid photo selected");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please select Valid Image");
            }

        }

        String newPath = "./uploads/Images";
        File directory = new File(newPath);
        if (!directory.exists()) { 
            directory.mkdirs();
        }
        

    }//GEN-LAST:event_picuploadActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        resetMData();
        
                List<Employee> searchList = new ArrayList<>();
        String tempString = JOptionPane.showInputDialog("Please enter Keyword to Search");
        for (Employee e : empDetails) {
            if (e.getName().contains(tempString) || Integer.toString(e.getAge()).contains(tempString)
                    || e.getGender().contains(tempString) || e.getStartDate().contains(tempString)
                    || Integer.toString(e.getEmployeeID()).contains(tempString) || e.getLevel().contains(tempString)
                    || e.getTeamInfo().contains(tempString) || e.getPositionTitle().contains(tempString)
                    || e.getContactInfo().getContactNumber().contains(tempString) || e.getContactInfo().getEmail().contains(tempString)) {
                searchList.add(e);
            }
        }
        setSearchTable(searchList);
    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new test().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age;
    private javax.swing.JButton delete;
    private javax.swing.JTextField email;
    private javax.swing.JTable employeeTable;
    private javax.swing.JRadioButton engineer;
    private javax.swing.JRadioButton female;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton lead;
    private javax.swing.JRadioButton level1;
    private javax.swing.JRadioButton level2;
    private javax.swing.JRadioButton level3;
    private javax.swing.JRadioButton level4;
    private javax.swing.ButtonGroup levelGroup;
    private javax.swing.JTextField mAge;
    private javax.swing.JTextField mContact;
    private javax.swing.JTextField mEmail;
    private javax.swing.JRadioButton mEngineer;
    private javax.swing.JRadioButton mFemale;
    private javax.swing.ButtonGroup mGenderGroup;
    private javax.swing.JRadioButton mLead;
    private javax.swing.JRadioButton mLevel1;
    private javax.swing.JRadioButton mLevel2;
    private javax.swing.JRadioButton mLevel3;
    private javax.swing.JRadioButton mLevel4;
    private javax.swing.ButtonGroup mLevelGroup;
    private javax.swing.JRadioButton mMale;
    private javax.swing.JRadioButton mManager;
    private javax.swing.JTextField mName;
    private javax.swing.ButtonGroup mPositionGroup;
    private javax.swing.JTextField mStartDate;
    private javax.swing.JTextField mTeamInfo;
    private javax.swing.JRadioButton male;
    private javax.swing.JRadioButton manager;
    private javax.swing.JTextField name;
    private javax.swing.JTextField phone;
    private javax.swing.JButton picupload;
    private javax.swing.ButtonGroup positionGroup;
    private javax.swing.JButton search;
    private javax.swing.JTextField startDate;
    private javax.swing.JButton submit;
    private javax.swing.JTextField teamInfo;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
